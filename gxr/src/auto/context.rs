// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../gir-files (@ eab91ba8f88b)
// from ../xrd-gir-files (@ 2f1ef32fd867)
// DO NOT EDIT

use glib::{translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "GxrContext")]
    pub struct Context(Object<ffi::GxrContext, ffi::GxrContextClass>);

    match fn {
        type_ => || ffi::gxr_context_get_type(),
    }
}

impl Context {
    #[doc(alias = "gxr_context_new")]
    pub fn new(app_name: &str, app_version: u32) -> Context {
        unsafe {
            from_glib_full(ffi::gxr_context_new(app_name.to_glib_none().0, app_version))
        }
    }

    //#[doc(alias = "gxr_context_new_from_vulkan_extensions")]
    //#[doc(alias = "new_from_vulkan_extensions")]
    //pub fn from_vulkan_extensions(instance_ext_list: /*Unimplemented*/&[&Basic: Pointer], device_ext_list: /*Unimplemented*/&[&Basic: Pointer], app_name: &str, app_version: u32) -> Context {
    //    unsafe { TODO: call ffi:gxr_context_new_from_vulkan_extensions() }
    //}

    //#[doc(alias = "gxr_context_attach_action_sets")]
    //pub fn attach_action_sets(&self, sets: /*Ignored*/&ActionSet, count: u32) -> bool {
    //    unsafe { TODO: call ffi:gxr_context_attach_action_sets() }
    //}

    #[doc(alias = "gxr_context_begin_frame")]
    pub fn begin_frame(&self) -> bool {
        unsafe {
            from_glib(ffi::gxr_context_begin_frame(self.to_glib_none().0))
        }
    }

    #[doc(alias = "gxr_context_end_frame")]
    pub fn end_frame(&self) -> bool {
        unsafe {
            from_glib(ffi::gxr_context_end_frame(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gxr_context_get_acquired_framebuffer")]
    //#[doc(alias = "get_acquired_framebuffer")]
    //pub fn acquired_framebuffer(&self) -> /*Ignored*/Option<gulkan::FrameBuffer> {
    //    unsafe { TODO: call ffi:gxr_context_get_acquired_framebuffer() }
    //}

    #[doc(alias = "gxr_context_get_buffer_index")]
    #[doc(alias = "get_buffer_index")]
    pub fn buffer_index(&self) -> u32 {
        unsafe {
            ffi::gxr_context_get_buffer_index(self.to_glib_none().0)
        }
    }

    //#[doc(alias = "gxr_context_get_device_manager")]
    //#[doc(alias = "get_device_manager")]
    //pub fn device_manager(&self) -> /*Ignored*/Option<DeviceManager> {
    //    unsafe { TODO: call ffi:gxr_context_get_device_manager() }
    //}

    //#[doc(alias = "gxr_context_get_eye_position")]
    //#[doc(alias = "get_eye_position")]
    //pub fn eye_position(&self, eye: /*Ignored*/Eye, v: /*Ignored*/&mut graphene::Vec3) {
    //    unsafe { TODO: call ffi:gxr_context_get_eye_position() }
    //}

    //#[doc(alias = "gxr_context_get_framebuffer_at")]
    //#[doc(alias = "get_framebuffer_at")]
    //pub fn framebuffer_at(&self, i: u32) -> /*Ignored*/Option<gulkan::FrameBuffer> {
    //    unsafe { TODO: call ffi:gxr_context_get_framebuffer_at() }
    //}

    //#[doc(alias = "gxr_context_get_frustum_angles")]
    //#[doc(alias = "get_frustum_angles")]
    //pub fn frustum_angles(&self, eye: /*Ignored*/Eye, left: f32, right: f32, top: f32, bottom: f32) {
    //    unsafe { TODO: call ffi:gxr_context_get_frustum_angles() }
    //}

    //#[doc(alias = "gxr_context_get_gulkan")]
    //#[doc(alias = "get_gulkan")]
    //pub fn gulkan(&self) -> /*Ignored*/Option<gulkan::Context> {
    //    unsafe { TODO: call ffi:gxr_context_get_gulkan() }
    //}

    //#[doc(alias = "gxr_context_get_head_pose")]
    //#[doc(alias = "get_head_pose")]
    //pub fn is_head_pose(&self, pose: /*Ignored*/&mut graphene::Matrix) -> bool {
    //    unsafe { TODO: call ffi:gxr_context_get_head_pose() }
    //}

    //#[doc(alias = "gxr_context_get_projection")]
    //#[doc(alias = "get_projection")]
    //pub fn projection(&self, eye: /*Ignored*/Eye, near: f32, far: f32, mat: /*Ignored*/&mut graphene::Matrix) {
    //    unsafe { TODO: call ffi:gxr_context_get_projection() }
    //}

    //#[doc(alias = "gxr_context_get_runtime_device_extensions")]
    //#[doc(alias = "get_runtime_device_extensions")]
    //pub fn is_runtime_device_extensions(&self, out_list: /*Unimplemented*/&[&Basic: Pointer]) -> bool {
    //    unsafe { TODO: call ffi:gxr_context_get_runtime_device_extensions() }
    //}

    //#[doc(alias = "gxr_context_get_runtime_instance_extensions")]
    //#[doc(alias = "get_runtime_instance_extensions")]
    //pub fn is_runtime_instance_extensions(&self, out_list: /*Unimplemented*/&[&Basic: Pointer]) -> bool {
    //    unsafe { TODO: call ffi:gxr_context_get_runtime_instance_extensions() }
    //}

    //#[doc(alias = "gxr_context_get_swapchain_extent")]
    //#[doc(alias = "get_swapchain_extent")]
    //pub fn swapchain_extent(&self, view_index: u32) -> /*Ignored*/Option<vulkan::Extent2D> {
    //    unsafe { TODO: call ffi:gxr_context_get_swapchain_extent() }
    //}

    #[doc(alias = "gxr_context_get_swapchain_length")]
    #[doc(alias = "get_swapchain_length")]
    pub fn swapchain_length(&self) -> u32 {
        unsafe {
            ffi::gxr_context_get_swapchain_length(self.to_glib_none().0)
        }
    }

    //#[doc(alias = "gxr_context_get_view")]
    //#[doc(alias = "get_view")]
    //pub fn view(&self, eye: /*Ignored*/Eye, mat: /*Ignored*/&mut graphene::Matrix) {
    //    unsafe { TODO: call ffi:gxr_context_get_view() }
    //}

    //#[doc(alias = "gxr_context_init_framebuffers")]
    //pub fn init_framebuffers(&self, extent: /*Ignored*/&vulkan::Extent2D, sample_count: /*Ignored*/&vulkan::SampleCountFlagBits, render_pass: /*Ignored*/&gulkan::RenderPass) -> bool {
    //    unsafe { TODO: call ffi:gxr_context_init_framebuffers() }
    //}

    #[doc(alias = "gxr_context_poll_events")]
    pub fn poll_events(&self) {
        unsafe {
            ffi::gxr_context_poll_events(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gxr_context_request_quit")]
    pub fn request_quit(&self) {
        unsafe {
            ffi::gxr_context_request_quit(self.to_glib_none().0);
        }
    }

    #[doc(alias = "gxr_context_wait_frame")]
    pub fn wait_frame(&self) -> bool {
        unsafe {
            from_glib(ffi::gxr_context_wait_frame(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "overlay-event")]
    //pub fn connect_overlay_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Unimplemented object: *.Pointer
    //}

    //#[doc(alias = "state-change-event")]
    //pub fn connect_state_change_event<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Unimplemented object: *.Pointer
    //}
}

unsafe impl Send for Context {}
unsafe impl Sync for Context {}

impl fmt::Display for Context {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Context")
    }
}
