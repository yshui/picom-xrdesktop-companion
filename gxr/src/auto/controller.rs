// Generated by gir (https://github.com/gtk-rs/gir @ 2358cc24efd2)
// from ../gir-files (@ eab91ba8f88b)
// from ../xrd-gir-files (@ 2f1ef32fd867)
// DO NOT EDIT

use glib::{translate::*};
use std::{fmt};

glib::wrapper! {
    #[doc(alias = "GxrController")]
    pub struct Controller(Object<ffi::GxrController, ffi::GxrControllerClass>);

    match fn {
        type_ => || ffi::gxr_controller_get_type(),
    }
}

impl Controller {
    #[doc(alias = "gxr_controller_new")]
    pub fn new(controller_handle: u64) -> Controller {
        unsafe {
            from_glib_full(ffi::gxr_controller_new(controller_handle))
        }
    }

    //#[doc(alias = "gxr_controller_get_hand_grip_pose")]
    //#[doc(alias = "get_hand_grip_pose")]
    //pub fn hand_grip_pose(&self, pose: /*Ignored*/&mut graphene::Matrix) {
    //    unsafe { TODO: call ffi:gxr_controller_get_hand_grip_pose() }
    //}

    //#[doc(alias = "gxr_controller_get_pointer_pose")]
    //#[doc(alias = "get_pointer_pose")]
    //pub fn is_pointer_pose(&self, pose: /*Ignored*/&mut graphene::Matrix) -> bool {
    //    unsafe { TODO: call ffi:gxr_controller_get_pointer_pose() }
    //}

    #[doc(alias = "gxr_controller_is_pointer_pose_valid")]
    pub fn is_pointer_pose_valid(&self) -> bool {
        unsafe {
            from_glib(ffi::gxr_controller_is_pointer_pose_valid(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "gxr_controller_update_hand_grip_pose")]
    //pub fn update_hand_grip_pose(&self, event: /*Ignored*/&mut PoseEvent) {
    //    unsafe { TODO: call ffi:gxr_controller_update_hand_grip_pose() }
    //}

    //#[doc(alias = "gxr_controller_update_pointer_pose")]
    //pub fn update_pointer_pose(&self, event: /*Ignored*/&mut PoseEvent) {
    //    unsafe { TODO: call ffi:gxr_controller_update_pointer_pose() }
    //}

    //#[doc(alias = "move")]
    //pub fn connect_move<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Unimplemented object: *.Pointer
    //}
}

unsafe impl Send for Controller {}
unsafe impl Sync for Controller {}

impl fmt::Display for Controller {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Controller")
    }
}
